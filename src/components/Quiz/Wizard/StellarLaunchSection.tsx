import { useEffect, useRef } from 'react';
import { useStellarWalletContext } from '../../../chains/stellar/StellarWalletProvider';
import { useQuizContract as useStellarQuizContract } from '../../../chains/stellar/useQuizContract';

type Props = {
  /** Trigger number: when this increments, we deploy */
  deployTrigger: number;
  /** Room/Host IDs (freshly generated by the parent) */
  roomId: string;
  hostId: string;

  /** Full setup config (parent already has) */
  setupConfig: any;

  /** Progress text shown by parent */
  onDeploymentProgress: (msg: string) => void;

  /** Success callback (parent will continue with API create + nav) */
  onDeployed: (res: { contractAddress: string; txHash: string; explorerUrl?: string }) => void;

  /** Error callback (parent will surface error + reset state) */
  onError: (message: string) => void;
};

/**
 * Runs Stellar deployment ONLY when `deployTrigger` changes.
 * Hooks live here (unconditional), so we avoid "conditional hooks" in the parent.
 * Renders nothing; purely side-effect driven.
 */
export default function StellarLaunchSection({
  deployTrigger,
  roomId,
  hostId: _hostId, // intentionally unused (kept for parity with parent)
  setupConfig,
  onDeploymentProgress,
  onDeployed,
  onError,
}: Props) {
  const stellarWallet = useStellarWalletContext();    // always called
  const stellarContract = useStellarQuizContract();   // always called
  const lastRunRef = useRef<number>(0);

  useEffect(() => {
    // Only act when trigger increments; ignore initial 0
    if (!deployTrigger || deployTrigger === lastRunRef.current) return;
    lastRunRef.current = deployTrigger;

    (async () => {
      try {
        if (!stellarWallet?.wallet.isConnected || !stellarWallet.wallet.address || !stellarContract) {
          throw new Error('Stellar wallet not connected or contract not ready');
        }

        onDeploymentProgress('Preparing room parameters…');

        // Common params
        const currency   = setupConfig.web3Currency || 'XLM';
        const entryFee   = setupConfig.entryFee || '1.0';
        const hostFeePct = setupConfig.web3PrizeSplit?.host || 0;
        const charity    = setupConfig.web3Charity;

        const prizeMode  = setupConfig.prizeMode as 'assets' | 'split' | undefined;

        // Helper: normalize any contract return shape to the minimal fields we need
        const toDeployedPayload = (raw: any) => {
          if (!raw || raw.success === false) throw new Error('Contract creation failed');
          return {
            contractAddress: String(raw.contractAddress),
            txHash: String(raw.txHash),
            explorerUrl: raw.explorerUrl ? String(raw.explorerUrl) : undefined,
          };
        };

        if (prizeMode === 'assets') {
          onDeploymentProgress('Creating asset-based room on Stellar…');

          // Convert UI prizes → contract expected prizes
          const expectedPrizes = (setupConfig.prizes || [])
            .filter((p: any) => p.tokenAddress && p.value && p.value > 0)
            .map((p: any) => ({
              tokenAddress: p.tokenAddress as string,
              amount: String(p.value),
            }));

          if (expectedPrizes.length === 0) {
            throw new Error('No valid prizes for asset room. Provide at least one prize with token and amount.');
          }

          const raw = await stellarContract.createAssetRoom({
            roomId,
            hostAddress: stellarWallet.wallet.address!,
            currency,
            entryFee,
            hostFeePct,
            charityName: charity,
            expectedPrizes,
          });

          const payload = toDeployedPayload(raw);
          onDeploymentProgress('Asset room created. Next: deposit prize assets.');
          onDeploymentProgress('Contract deployed successfully!');
          onDeployed(payload);
          return;
        }

        // Default: prize-pool room
        onDeploymentProgress('Creating prize-pool room on Stellar…');

        const prizePoolPct = setupConfig.web3PrizeSplit?.prizes || 0;
        const prizeSplits = setupConfig.prizeSplits
          ? {
              first:  setupConfig.prizeSplits[1] || 100,
              second: setupConfig.prizeSplits[2],
              third:  setupConfig.prizeSplits[3],
            }
          : { first: 100 };

        const raw = await stellarContract.createPoolRoom({
          roomId,
          hostAddress: stellarWallet.wallet.address!,
          currency,
          entryFee,
          hostFeePct,
          prizePoolPct,
          charityName: charity,
          prizeSplits,
        });

        const payload = toDeployedPayload(raw);
        onDeploymentProgress('Prize pool room created.');
        onDeploymentProgress('Contract deployed successfully!');
        onDeployed(payload);
      } catch (err: any) {
        onError(err?.message || 'Stellar deployment failed');
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [deployTrigger]);

  return null;
}

